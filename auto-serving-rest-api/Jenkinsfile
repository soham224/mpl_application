pipeline {
  agent any
  environment {
	REPO_PATH = '437476783934.dkr.ecr.ap-south-1.amazonaws.com'
	ECR_REGION = 'ap-south-1'
    DEV_REPO = 'dev-as-rest-api'
    PROD_REPO = 'as-rest-api'
	CLUSTER = 'tusker-internal-apps-private'
  }
  stages {
    stage('authentication') {
		steps {
    		sh 'docker login -u AWS -p $(aws ecr get-login-password --region ${ECR_REGION}) ${REPO_PATH}'
		  }
	    post {
			success{
				echo "authentication successful"
			}
			failure{
				echo "authentication failed"
			}
		}
	}
    stage('build') {
		steps {
    		echo 'starting build'
    		bitbucketStatusNotify(buildState: 'INPROGRESS')
    		sh 'docker build -t as-rest-api:${GIT_COMMIT} .'
    		echo 'end build'
		  }
	    post {
			success{
				echo "build successful"
			}
			failure{
				echo "build failed"
			}
		}
	}
    stage('deploy to dev') {
      when {
		branch 'development'
	  }
      steps {
        echo 'start dev deployment'
        sh 'docker tag as-rest-api:${GIT_COMMIT} $REPO_PATH/$DEV_REPO:${GIT_COMMIT}'
        sh 'docker push $REPO_PATH/$DEV_REPO:${GIT_COMMIT}'
        sh 'docker tag as-rest-api:${GIT_COMMIT} $REPO_PATH/$DEV_REPO:latest'
        sh 'docker push $REPO_PATH/$DEV_REPO:latest'
        sh 'aws ecs update-service --cluster $CLUSTER --service dev-tusker-as-rest-api-service --force-new-deployment'
        echo 'end dev deployment'
      }
      post {
			success{
				echo "deploy successful to dev"
			}
			failure{
				echo "deploy failed in dev"
			}
		}
    }
    
    stage('deploy to production') {
      when {
		branch 'master'
	  }
      steps {
        echo 'start production deployment'
        sh 'docker tag as-rest-api:${GIT_COMMIT} $REPO_PATH/$PROD_REPO:${GIT_COMMIT}'
        sh 'docker push $REPO_PATH/$PROD_REPO:${GIT_COMMIT}'
        sh 'docker tag as-rest-api:${GIT_COMMIT} $REPO_PATH/$PROD_REPO:latest'
        sh 'docker push $REPO_PATH/$PROD_REPO:latest'
        sh 'aws ecs update-service --cluster $CLUSTER --service tusker-as-rest-api-service --force-new-deployment'
        echo 'end production deployment'
      }
      post {
			success{
				echo "deploy successful to production"
			}
			failure{
				echo "deploy failed in production"
			}
		}
    }
  }
  post {
	success{
		echo "pipeline execution successful"
		bitbucketStatusNotify(buildState: 'SUCCESSFUL')
	}
	failure{
		echo "pipeline execution failed"
		bitbucketStatusNotify(buildState: 'FAILED')
	}
  }
}

